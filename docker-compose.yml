version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: knotts_postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-knotts}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-knotts_secure_2024}
      POSTGRES_DB: ${DB_NAME:-knotts_accounting}
      POSTGRES_HOST_AUTH_METHOD: md5
      TZ: Africa/Johannesburg
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-knotts} -d ${DB_NAME:-knotts_accounting}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - knotts_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: knotts_redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - knotts_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: knotts_backend
    restart: always
    environment:
      DATABASE_URL: postgresql://${DB_USER:-knotts}:${DB_PASSWORD:-knotts_secure_2024}@db:5432/${DB_NAME:-knotts_accounting}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      SARS_API_URL: ${SARS_API_URL:-https://secure.sarsefiling.co.za}
      SARS_USERNAME: ${SARS_USERNAME}
      SARS_PASSWORD: ${SARS_PASSWORD}
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_MINUTES: ${JWT_EXPIRATION_MINUTES:-60}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      TZ: Africa/Johannesburg
    volumes:
      - ./src:/app/src
      - ./alembic:/app/alembic
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - knotts_network
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers 4
      "

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: knotts_celery_worker
    restart: always
    environment:
      DATABASE_URL: postgresql://${DB_USER:-knotts}:${DB_PASSWORD:-knotts_secure_2024}@db:5432/${DB_NAME:-knotts_accounting}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      TZ: Africa/Johannesburg
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
    networks:
      - knotts_network
    command: celery -A src.core.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: knotts_celery_beat
    restart: always
    environment:
      DATABASE_URL: postgresql://${DB_USER:-knotts}:${DB_PASSWORD:-knotts_secure_2024}@db:5432/${DB_NAME:-knotts_accounting}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      TZ: Africa/Johannesburg
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
    networks:
      - knotts_network
    command: celery -A src.core.celery_app beat --loglevel=info

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: knotts_flower
    restart: always
    environment:
      CELERY_BROKER_URL: redis://default:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin_secure_2024}
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker
    networks:
      - knotts_network
    command: celery -A src.core.celery_app flower --port=5555

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: knotts_frontend
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
      NODE_ENV: production
      TZ: Africa/Johannesburg
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - knotts_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: knotts_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/out:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - knotts_network

  # PgAdmin for Database Management (Optional - Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: knotts_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@knotts.co.za}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-pgadmin_secure_2024}
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - knotts_network
    profiles:
      - development

networks:
  knotts_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  nginx_logs:
    driver: local